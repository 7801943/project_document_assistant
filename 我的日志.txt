2025-6-13 server_v3已经实现了由服务端LLM通过mcp工具实现用户测文件预览的打开，但是ipv6不可以只能ipv4局域网访问，似乎是因为kkfileview的原因。
我计划在server_v4里完善工作区目录的功能。

2025-6-13
我准备不使用iframe，而自己做聊天客户端：

知识库检索apikey：app-ZCeexHaiu9s54d9mWlIyMzZM

智能体apikey：app-yhsaC0zvlgHjZZV47y7JkGHe

curl -X POST 'http://127.0.0.1/v1/chat-messages' \
--header 'Authorization: Bearer {app-ZCeexHaiu9s54d9mWlIyMzZM}' \
--header 'Content-Type: application/json' \
--data-raw '{
    "inputs": {},
    "query": "你好",
    "response_mode": "streaming",
    "conversation_id": "",
    "user": "abc-123",
    "files": [
      {
        "type": "image",
        "transfer_method": "remote_url",
        "url": "https://cloud.dify.ai/logo/logo-site.png"
      }
    ]
}'


const API_URL = "http://127.0.0.1/v1/chat-messages"; // <--- 替换为你的 API URL
const API_KEY = "app-yhsaC0zvlgHjZZV47y7JkGHe"; // <--- 替换为你的 API Key

在dify的agent api中，对于模型返回的处理有一点特殊的地方，当后端不是个思考模型，模型的输出会被放到agent_thought的块里输出，而不是message，需要注意。

2025-6-14 实现了fastapi对kkfileview的转发功能，初步测试成功。
具体见forward_test.py
用两个路由实现对kkfileview 的 onlineReview转发和普通资源的转发

# --- 通用代理路由 (用于静态文件等) ---
@app.api_route("/kkfileview/{full_path:path}")
async def generic_kkfileview_proxy(request: Request, full_path: str):
    """
    通用代理，用于转发 kkFileView 的静态资源请求 (如 JS, CSS, images)。
    这些请求不需要特殊编码，直接透传。
    """
# --- 专用于处理初始预览请求的路由 ---
@app.get("/kkfileview/onlinePreview")
async def preview_encoder_proxy(file_url: str):
    """
    专门处理初始预览请求。
    1. 接收原始文件链接 (file_url)。
    2. 对其进行 Base64 编码。
    3. 将编码后的结果作为 'url' 参数转发给 kkFileView。
    """

同时需要kkfileview配合：

# 启动时注入base.url

  docker run -d \
  --name my_kkfileview \
  -p 8012:8012 \
  -e KK_BASE_URL=https://host.docker.internal:8888/kkfileview \ （这个参数设置为BASE_URL也可以工作？？以后再检查怎么回事）
  -e KK_CACHE_ENABLED=false \  （这个参数设置好像结合上面的KK_BASE_URL 反而不能正确工作了）
  keking/kkfileview:4.1.0

  实现对/opt/kkFileView-4.1.0/config/application.properties 中file.url 的重载，让静态资源请求加上kkfileview前缀

移植到server_v5.py和index5.html
# 前端对fastapi的访问必须为host.docker.internal:8888 目前是硬编码在前端index5.html里的
将返回的文件名加了相对路径


我考虑了下，还是采用后端的方式来实施拦截工具调用，这样不需要修改前端逻辑，
为了这个尝试，我把代码从serve_v5.py 和index5.html 迁移到了server_v6.py和index6.html，我已经将部分编码实现在v6，请在v6版本上进行修改。

在server_v6 做以下修改
1. 重新检查所有代码，请大幅简化用户的会话管理部分代码，我的核心要求是，用户登录后，使用depends检查后允许访问所有fastapi端点(除了kkfileview端点以及文件下载端点)，没有http活动超过30分钟后要求重新登录，暂时先不记录websocket的活动
2. 在read_project_file 里不要再去清理或者检查token有效性了，放到scheduler按时间去清理，在文件下载链接也是，把这个token放到用户的会话数据中，
3. 把compact_file和 read_budget_file 中对于文件读取的部分解耦出来，结合get_file_content，把具体的读取解析代码放到 file_parser.py 中去

kkfileview还是有问题，我准备覆盖配置文件：

docker run -d \
  --name my_kkfileview_configfile \
  -p 8012:8012 \
  -v /home/zhouxiang/kkfileview/application.properties:/opt/kkFileView-4.1.0/config/application.properties \
  keking/kkfileview:4.1.0


kkfileview的问题解决了
主要是，在kkfileview 的application 中
server.servlet.context-path =/kkfileview
同步的，KKFILEVIEW_BASE_URL = "http://127.0.0.1:8012/kkfileview"
然后kkfilview 的base.url 保持默认即可，如果设置为/kkfileview 就 不行了
fastapi端点和前端请求路径见server_v6.py index6.html

2025-6-17
index6-> index7.html


data: {"event": "agent_thought", "id": "8dcf3648-fbad-407a-85dd-73a6f43aeb9f", "task_id": "9cf1ddd7-f94b-459b-b942-b77b26c59e9b", "message_id": "1fb10045-55fd-4040-99e6-d048d07cbad3", "position": 1, "thought": "", "observation": "", "tool": "", "tool_input": "", "created_at": 1705639511, "message_files": [], "conversation_id": "c216c595-2d89-438c-b33c-aae5ddddd142"}
  data: {"event": "agent_thought", "id": "8dcf3648-fbad-407a-85dd-73a6f43aeb9f", "task_id": "9cf1ddd7-f94b-459b-b942-b77b26c59e9b", "message_id": "1fb10045-55fd-4040-99e6-d048d07cbad3", "position": 1, "thought": "", "observation": "", "tool": "dalle3", "tool_input": "{\"dalle3\": {\"prompt\": \"cute Japanese anime girl with white hair, blue eyes, bunny girl suit\"}}", "created_at": 1705639511, "message_files": [], "conversation_id": "c216c595-2d89-438c-b33c-aae5ddddd142"}
  data: {"event": "message_file", "id": "d75b7a5c-ce5e-442e-ab1b-d6a5e5b557b0", "type": "image", "belongs_to": "assistant", "url": "http://127.0.0.1:5001/files/tools/d75b7a5c-ce5e-442e-ab1b-d6a5e5b557b0.png?timestamp=1705639526&nonce=70423256c60da73a9c96d1385ff78487&sign=7B5fKV9890YJuqchQvrABvW4AIupDvDvxGdu1EOJT94=", "conversation_id": "c216c595-2d89-438c-b33c-aae5ddddd142"}
  data: {"event": "agent_thought", "id": "8dcf3648-fbad-407a-85dd-73a6f43aeb9f", "task_id": "9cf1ddd7-f94b-459b-b942-b77b26c59e9b", "message_id": "1fb10045-55fd-4040-99e6-d048d07cbad3", "position": 1, "thought": "", "observation": "image has been created and sent to user already, you should tell user to check it now.", "tool": "dalle3", "tool_input": "{\"dalle3\": {\"prompt\": \"cute Japanese anime girl with white hair, blue eyes, bunny girl suit\"}}", "created_at": 1705639511, "message_files": ["d75b7a5c-ce5e-442e-ab1b-d6a5e5b557b0"], "conversation_id": "c216c595-2d89-438c-b33c-aae5ddddd142"}
  data: {"event": "agent_thought", "id": "67a99dc1-4f82-42d3-b354-18d4594840c8", "task_id": "9cf1ddd7-f94b-459b-b942-b77b26c59e9b", "message_id": "1fb10045-55fd-4040-99e6-d048d07cbad3", "position": 2, "thought": "", "observation": "", "tool": "", "tool_input": "", "created_at": 1705639511, "message_files": [], "conversation_id": "c216c595-2d89-438c-b33c-aae5ddddd142"}
  data: {"event": "agent_message", "id": "1fb10045-55fd-4040-99e6-d048d07cbad3", "task_id": "9cf1ddd7-f94b-459b-b942-b77b26c59e9b", "message_id": "1fb10045-55fd-4040-99e6-d048d07cbad3", "answer": "I have created an image of a cute Japanese", "created_at": 1705639511, "conversation_id": "c216c595-2d89-438c-b33c-aae5ddddd142"}
  data: {"event": "agent_message", "id": "1fb10045-55fd-4040-99e6-d048d07cbad3", "task_id": "9cf1ddd7-f94b-459b-b942-b77b26c59e9b", "message_id": "1fb10045-55fd-4040-99e6-d048d07cbad3", "answer": " anime girl with white hair and blue", "created_at": 1705639511, "conversation_id": "c216c595-2d89-438c-b33c-aae5ddddd142"}
  data: {"event": "agent_message", "id": "1fb10045-55fd-4040-99e6-d048d07cbad3", "task_id": "9cf1ddd7-f94b-459b-b942-b77b26c59e9b", "message_id": "1fb10045-55fd-4040-99e6-d048d07cbad3", "answer": " eyes wearing a bunny girl" ,"created_at": 1705639511, "conversation_id": "c216c595-2d89-438c-b33c-aae5ddddd142"}
  data: {"event": "agent_message", "id": "1fb10045-55fd-4040-99e6-d048d07cbad3", "task_id": "9cf1ddd7-f94b-459b-b942-b77b26c59e9b", "message_id": "1fb10045-55fd-4040-99e6-d048d07cbad3", "answer": " suit .", "created_at": 1705639511, "conversation_id": "c216c595-2d89-438c-b33c-aae5ddddd142"}
  data: {"event": "agent_thought", "id": "67a99dc1-4f82-42d3-b354-18d4594840c8", "task_id": "9cf1ddd7-f94b-459b-b942-b77b26c59e9b", "message_id": "1fb10045-55fd-4040-99e6-d048d07cbad3", "position": 2, "thought": "I have created an image of a cute Japanese anime girl with white hair and blue eyes wearing a bunny girl suit.", "observation": "", "tool": "", "tool_input": "", "created_at": 1705639511, "message_files": [], "conversation_id": "c216c595-2d89-438c-b33c-aae5ddddd142"}
  data: {"event": "message_end", "id": "5e52ce04-874b-4d27-9045-b3bc80def685", "conversation_id": "45701982-8118-4bc5-8e9b-64562b4555f2", "metadata": {"usage": {"prompt_tokens": 1033, "prompt_unit_price": "0.001", "prompt_price_unit": "0.001", "prompt_price": "0.0010330", "completion_tokens": 135, "completion_unit_price": "0.002", "completion_price_unit": "0.001", "completion_price": "0.0002700", "total_tokens": 1168, "total_price": "0.0013030", "currency": "USD", "latency": 1.381760165997548}, "retriever_resources": [{"position": 1, "dataset_id": "101b4c97-fc2e-463c-90b1-5261a4cdcafb", "dataset_name": "iPhone", "document_id": "8dd1ad74-0b5f-4175-b735-7d98bbbb4e00", "document_name": "iPhone List", "segment_id": "ed599c7f-2766-4294-9d1d-e5235a61270a", "score": 0.98457545, "content": "\"Model\",\"Release Date\",\"Display Size\",\"Resolution\",\"Processor\",\"RAM\",\"Storage\",\"Camera\",\"Battery\",\"Operating System\"\n\"iPhone 13 Pro Max\",\"September 24, 2021\",\"6.7 inch\",\"1284 x 2778\",\"Hexa-core (2x3.23 GHz Avalanche + 4x1.82 GHz Blizzard)\",\"6 GB\",\"128, 256, 512 GB, 1TB\",\"12 MP\",\"4352 mAh\",\"iOS 15\""}]}}

  data: {"event": "tts_message", "conversation_id": "23dd85f3-1a41-4ea0-b7a9-062734ccfaf9", "message_id": "a8bdc41c-13b2-4c18-bfd9-054b9803038c", "created_at": 1721205487, "task_id": "3bf8a0bb-e73b-4690-9e66-4e429bad8ee7", "audio": "qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq"}
  data: {"event": "tts_message_end", "conversation_id": "23dd85f3-1a41-4ea0-b7a9-062734ccfaf9", "message_id": "a8bdc41c-13b2-4c18-bfd9-054b9803038c", "created_at": 1721205487, "task_id": "3bf8a0bb-e73b-4690-9e66-4e429bad8ee7", "audio": ""}


  检查下 server_v6.py 我希望在stream_chat_to_websocket当中实现chat_forward_and_intercept_generator已经实现的sse拦截功能，即调用extract_content_from_sse


检查下 server_v6.py index7.html我希望1. 在stream_chat_to_websocket当中实现chat_forward_and_intercept_generator已经实现的sse拦截功能，即调用extract_content_from_sse2. 规划下将read_project_file中已经注释掉的websocket广播通过新的iws_chat_stream实现，包括token的处理，会话id和用户名归属，可以看下增加的class UserSessionData 字段 work_directory和 llm_opened_files，逻辑是，当拦截到工具调用，比如read_porject_file调用后，检查结果是否”完成“，token是否存在，没问题的话把token存入到用户的会话数据中，llm_opend_files里，然后通过websocket把token和指令告知前端，可以调用viewFile预览了，，然后前端请求download/<token>/filenane这个端点下载并预览

把get_host_ipv6_addr 、 get_current_time、def calculate_md5 移植到my_utils/utils.py


vllm 接口：
INFO 05-30 17:22:33 [api_server.py:1090] Starting vLLM API server on http://0.0.0.0:8001
INFO 05-30 17:22:33 [launcher.py:28] Available routes are:
INFO 05-30 17:22:33 [launcher.py:36] Route: /openapi.json, Methods: GET, HEAD
INFO 05-30 17:22:33 [launcher.py:36] Route: /docs, Methods: GET, HEAD
INFO 05-30 17:22:33 [launcher.py:36] Route: /docs/oauth2-redirect, Methods: GET, HEAD
INFO 05-30 17:22:33 [launcher.py:36] Route: /redoc, Methods: GET, HEAD
INFO 05-30 17:22:33 [launcher.py:36] Route: /health, Methods: GET
INFO 05-30 17:22:33 [launcher.py:36] Route: /load, Methods: GET
INFO 05-30 17:22:33 [launcher.py:36] Route: /ping, Methods: POST, GET
INFO 05-30 17:22:33 [launcher.py:36] Route: /tokenize, Methods: POST
INFO 05-30 17:22:33 [launcher.py:36] Route: /detokenize, Methods: POST
INFO 05-30 17:22:33 [launcher.py:36] Route: /v1/models, Methods: GET
INFO 05-30 17:22:33 [launcher.py:36] Route: /version, Methods: GET
INFO 05-30 17:22:33 [launcher.py:36] Route: /v1/chat/completions, Methods: POST
INFO 05-30 17:22:33 [launcher.py:36] Route: /v1/completions, Methods: POST
INFO 05-30 17:22:33 [launcher.py:36] Route: /v1/embeddings, Methods: POST
INFO 05-30 17:22:33 [launcher.py:36] Route: /pooling, Methods: POST
INFO 05-30 17:22:33 [launcher.py:36] Route: /score, Methods: POST
INFO 05-30 17:22:33 [launcher.py:36] Route: /v1/score, Methods: POST
INFO 05-30 17:22:33 [launcher.py:36] Route: /v1/audio/transcriptions, Methods: POST
INFO 05-30 17:22:33 [launcher.py:36] Route: /rerank, Methods: POST
INFO 05-30 17:22:33 [launcher.py:36] Route: /v1/rerank, Methods: POST
INFO 05-30 17:22:33 [launcher.py:36] Route: /v2/rerank, Methods: POST
INFO 05-30 17:22:33 [launcher.py:36] Route: /invocations, Methods: POST
INFO 05-30 17:22:33 [launcher.py:36] Route: /metrics, Methods: GET


curl -X POST http://127.0.0.1/v1/chat-messages \
-H "Content-Type: application/json" \
-H "Authorization: Bearer app-yhsaC0zvlgHjZZV47y7JkGHe" \
-H "Accept: text/event-stream" \
-d '{"query": "hle", "user": "anonymous", "response_mode": "streaming"}' --no-buffer

工具返回结果：
调用工具: mcp_sse_call_tool
工具输入: {"mcp_sse_call_tool": {"tool_name": "read_project_file", "arguments": "{"user_name":"admin","relative_file_path":"2024/江苏苏州船闸110千伏变电站2号3号主变扩建工程初步设计/送审/★初步设计（20240531--内审后修改版）/test.pdf","file_category":"普通文档"}"}}
工具结果: {"mcp_sse_call_tool": "Tool execution result: [{'type': 'text', 'text': '《result:完成》《token:72db257df99d4044ab0effb5884bddb7》《file_path:2024/江苏苏州船闸110千伏变电站2号3号主变扩建工程初步设计/送审/★初步设计（20240531--内审后修改版）/test.pdf》《download_url:http://[240e:479:668:3c1c:3524:bf7b:9356:db3d]:8888/download/72db257df99d4044ab0effb5884bddb7/test.pdf》《file_content:2．系统部分\n2.0 主要技术方案\n2.0.1 系统继电保护\n本期工程新架设双回线路开断刘桃园～爱园线，并双回接入前圩变，并将刘\n桃园～前圩线改为 T 接至刘桃园卢廷线，形成 110kV 前圩爱园线路（因本期\n前圩到爱园有两条线路，该线路暂命名为 110kV前圩爱园2线）及 110kV前圩\nT 接卢刘 7K23 线路，前圩变需新建 2 个 110kV 线路间隔满足线路接入要求。\n110kV 前圩爱园 2 线在爱园变侧利用原 7K25 线路间隔，已配置 PRS-713AX-\nFA-G 深瑞两侧光差保护 1 套，需在前圩变 110kV I母新建 1 个间隔，考虑新增\n1套110kV线路差动保护，建议与爱园变侧配合，采用深瑞同型号设备。110kV\n前圩T接卢刘7K23 线路在220kV卢廷变侧已配置 NSR-304DA-DA-G-C 南瑞科\n技光差保护 1套，在 220kV刘桃园变侧已配置 PCS-943A-G-G9南瑞继保光差保\n护 1 套，在前圩变利用原 7K24 线路间隔，已配置 PCS-943A-DA-G-C 南瑞继保\n光差保护1套，满足工程要求，本期不做变动。\n110kV 前卢 7K53 线路本期无变化，保护不做变动。根据接入系统方案，\n110kV 前圩~爱园 1 线在爱园\n变侧利用原 7K22 线路间隔，\n已配置 PRS-713TX-FA-G 深\n瑞三侧光差保护1套，需在前\n圩变 110kV II 母新建 1 个间\n隔，考虑新增1套110kV 线路\n差动保护，建议与爱园变侧配\n合，采用深瑞同型号设备。\n110kV 母差保护、110kV\n故障录波器容量在前期工程\n中已考虑，满足本期扩建需\n求，本期不做变动。》《hint:文件内容较多，无需全部输出,向用户提供下载链接》'}]"}

帮我检查下index7.html，为什么总是重试，后端日志如下：2025-06-24 21:38:13.617 | INFO     | sse_proxy.sse2websocket:run:201 - 用户 admin 会话 b82ac237-4a4e-4ede-ab67-6bd23611f2de 启动新流任务: 告诉我你读到的工具返回结果的开始和结尾是什么
2025-06-24 21:38:13.617 | DEBUG    | sse_proxy.sse2websocket:_start:43 - SSEWebSocketProxy._start: 会话 b82ac237-4a4e-4ede-ab67-6bd23611f2de, 用户: admin, 上游API：http://127.0.0.1/v1/chat-messages
2025-06-24 21:38:13.617 | INFO     | sse_proxy.sse2websocket:_stream_from_upstream:84 - 即将连接上游 SSE: http://127.0.0.1/v1/chat-messages
2025-06-24 21:38:32.613 | DEBUG    | sse_proxy.sse2websocket:_start:63 - SSE-WS 代理任务结束: 会话 b82ac237-4a4e-4ede-ab67-6bd23611f2de
2025-06-24 21:48:57.367 | INFO     | session:process_inactive_sessions:215 - 检测到 1 个不活动会话，将执行登出: admin
2025-06-24 21:48:57.367 | INFO     | session:process_inactive_sessions:221 - APScheduler: 用户 'admin' (会话 b82ac237-4a4e-4ede-ab67-6bd23611f2de) 因不活动被自动登出。
2025-06-24 21:48:57.367 | INFO     | session:process_inactive_sessions:223 - APScheduler: 尝试关闭用户 'admin' 的不活动WebSocket连接。
2025-06-24 21:48:57.401 | INFO     | sse_proxy.sse2websocket:run:220 - WebSocket 会话 b82ac237-4a4e-4ede-ab67-6bd23611f2de 用户 admin 断开连接
2025-06-24 21:48:57.401 | INFO     | sse_proxy.sse2websocket:_stop:67 - SSEWebSocketProxy._stop
INFO:     connection closed
INFO:     ('240e:3a2:610:7250::e7', 14199) - "WebSocket /ws_chat_stream?session_id=b82ac237-4a4e-4ede-ab67-6bd23611f2de" [accepted]
INFO:     connection open
INFO:     connection closed
INFO:     ('240e:3a2:610:7250::e7', 14200) - "WebSocket /ws_chat_stream?session_id=b82ac237-4a4e-4ede-ab67-6bd23611f2de" [accepted]
INFO:     connection open
INFO:     connection closed
INFO:     ('240e:3a2:610:7250::e7', 14209) - "WebSocket /ws_chat_stream?session_id=b82ac237-4a4e-4ede-ab67-6bd23611f2de" [accepted]
INFO:     connection open
INFO:     connection closed
INFO:     ('240e:3a2:610:7250::e7', 14225) - "WebSocket /ws_chat_stream?session_id=b82ac237-4a4e-4ede-ab67-6bd23611f2de" [accepted]
INFO:     connection open
INFO:     connection closed
INFO:     ('240e:3a2:610:7250::e7', 14236) - "WebSocket /ws_chat_stream?session_id=b82ac237-4a4e-4ede-ab67-6bd23611f2de" [accepted]
INFO:     connection open
INFO:     connection closed
INFO:     ('240e:3a2:610:7250::e7', 14238) - "WebSocket /ws_chat_stream?session_id=b82ac237-4a4e-4ede-ab67-6bd23611f2de" [accepted]
INFO:     connection open
INFO:     connection closed

同意你的看法，1. 但是前端页面不应该不停的重试，重试应该有次数限制或者前端知道后端？2. websocket会长期处于连接状态，没有任何信息发送，这应该视作不活动 ，所以正确的是，后端没有收到任何前端的http请求 且 没有任何websocket信息发送或接受，才开始不活动计时。3. 满足踢出条件后，前端不应该不停的进行重试了。4. 在websocket的后端端点，其实已经向前端发送了websocket的close code，前端获取这个code后应该知道不要再重试了，同时提示用户

帮我修改下前端的几个bug，当发送query到服务器端后，接收chat的过程中，发送按钮调整为灰色，不考虑第二次发送，1.在右侧聊天框部位增加一个“新对话”按钮，发送给后端，后端在sse2wesocket的run中处理下这个逻辑，我的想法是在SSEWebSocketProxy维护一个conversation_id列表，每次i刷新后把当前的对话id填充到列表中，然后新增一个空的conversation_id，规划下这个修改

2025-6-25 遇到了奇怪的问题，有一个FAKE_USERS_DB_JSON覆盖了我的.env
echo $FAKE_USERS_DB_JSON
{"admin": {"password": "password"}, "debug":{"password":"debug"}}
(venv) zhouxiang@zhouxiang-Precision-5820-Tower:~/mcp_file_server$ nano ~/.bashrc
(venv) zhouxiang@zhouxiang-Precision-5820-Tower:~/mcp_file_server$ unset FAKE_USERS_DB_JSON
导致我新增的用户名密码不可以用。

# 小心修改env，如果旧的出错，即使改为新的可能会有系统环境变量使用旧的数据覆盖
unset DOWNLOAD_LINK_VALIDITY_SECONDS
unset SESSION_OVERALL_INACTIVITY_TIMEOUT_SECONDS

kkfilevew 有个坑：
请求的文件名一定要不重名，路径不同，扩展名不同没有用，否则就是使用缓存的文件，不会拉去新的文件。


/media/zhouxiang/FC7C74827C743A0A/规程规范/电气/DLT-866-2015 电流互感器和电压互感器选择及计算规程_md/images

/media/zhouxiang/FC7C74827C743A0A/规程规范/电气/33-GB-50217-2018-电力工程电缆设计标准_md/images

/media/zhouxiang/FC7C74827C743A0A/规程规范/二次/GB／T-14285—2023《继电保护和安全自动装置技术规程》_md/images

不能用fastapi的 UploadFile，必须用 starlette的。
否则isinstance() 无法通过


kimi api_key :
sk-7GUfyabVxWR9iTurMSCfd3Ln3aFF8DMgmOj8M2N40XLlXvEL

onlyoffice docker 启动：(独立 document 服务器)
在onlyoffice 目录：docker-compose -f docker-compose-document.yml up -d
PORT 8080:80
8443:443

JWT：
6955cd123336471f917122f777e35f227f97d2c7bfa1f54612cbac3d73d11995

